service: adaptive-api
frameworkVersion: "3"

plugins:
  - serverless-iam-roles-per-function
  - serverless-step-functions
  - serverless-export-env
  - serverless-esbuild

package:
  exclude:
    - package-lock.json
    - package.json

custom:
  esbuild:
    bundle: true
    minify: false
    sourcemap: true
    target: node20
    platform: node
    format: esm
  name: vishal
  stage: ${opt:stage, self:provider.stage}
  logRetentionInDays: 30
  logLevel:
    default: ALL
    prod: ERROR

  appSyncLogLevel:
    default: ALL
    prod: ERROR
provider:
  name: aws
  runtime: nodejs20.x
  architecture: arm64 # Optional: for better performance
  stage: ${opt:stage, 'dev'}
  versionFunctions: false
  region: us-east-1
  memorySize: 512
  environment:
    USER_CREDENTIALS_TABLE: !Ref UserCredentialsTable
    ADAPTIVE_KMS_ARN: !GetAtt AdaptiveKMSKey.Arn
    REGION: ${self:provider.region}
    STAGE: ${self:provider.stage}
    LOG_LEVEL: ${self:custom.logLevel.${self:provider.stage}, self:custom.logLevel.default}
    NODE_OPTIONS: --enable-source-maps
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:PutItem
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:UpdateItem
        - dynamodb:ListTables
        - dynamodb:DeleteItem
        - dynamodb:BatchWriteItem
        - dynamodb:BatchGetItem
      Resource: "*"
    - Effect: Allow
      Action:
        - ApiGateway:*
      Resource: "*"
    - Effect: Allow
      Action:
        - cloudformation:ValidateTemplate
        - cloudformation:CreateStack
        - cloudformation:ListStackResources
        - cloudformation:DescribeStackResource
        - cloudformation:DescribeStacks
      Resource: "*"
      # Email
    - Effect: Allow
      Action: ses:SendEmail
      Resource: "*"
    - Effect: Allow
      Action: ssm:GetParameters
      Resource: "*"

    - Effect: Allow
      Action: events:*
      Resource: "*"
    - Effect: Allow
      Action:
        - s3:*
      Resource: "*"
    - Effect: Allow
      Action:
        - bedrock:InvokeModel
      Resource: "*"

functions:
  public-authorizer:
    handler: functions/auth/public-authorizer.handler
    environment:
      USER_CREDENTIALS_TABLE: !Ref UserCredentialsTable
  authorizer:
    handler: functions/auth/authorizer.handler
    environment:
      USER_CREDENTIALS_TABLE: !Ref UserCredentialsTable
  list-user-credentials:
    handler: functions/user-credentials/list-user-credentials.handler
    events:
      - http:
          path: /v1/list-user-credentials
          method: post
          cors: true
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: !GetAtt CognitoUserPool.Arn
    environment:
      USER_CREDENTIALS_TABLE: !Ref UserCredentialsTable
  add-user-credential:
    handler: functions/user-credentials/add-user-credential.handler
    events:
      - http:
          path: /v1/add-user-credential
          method: post
          cors: true
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: !GetAtt CognitoUserPool.Arn
    environment:
      USER_CREDENTIALS_TABLE: !Ref UserCredentialsTable
  update-user-credential:
    handler: functions/user-credentials/update-user-credential.handler
    events:
      - http:
          path: /v1/update-user-credential
          method: post
          cors: true
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: !GetAtt CognitoUserPool.Arn
    environment:
      USER_CREDENTIALS_TABLE: !Ref UserCredentialsTable
  delete-user-credential:
    handler: functions/user-credentials/delete-user-credential.handler
    events:
      - http:
          path: /v1/delete-user-credential
          method: post
          cors: true
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: !GetAtt CognitoUserPool.Arn
    environment:
      user_credentials_table: !Ref UserCredentialsTable
  confirmUserSignup:
    handler: functions/user/confirm-user-signup.handler
    environment:
      USERS_TABLE: !Ref UsersTable
      USER_PREFERENCE_TABLE: !Ref UserPreferenceTable
  identify:
    handler: functions/analytics/identify.handler
    events:
      - http:
          path: /v1/analytics/identify
          method: POST
          cors: true
          # authorizer:
          #   name: CognitoAuthorizer
          #   type: COGNITO_USER_POOLS
          #   arn: !GetAtt CognitoUserPool.Arn
    environment:
      IDENTITY_TABLE: !Ref IdentityTableV2
  add-events:
    handler: functions/analytics/add-events.handler
    events:
      - http:
          path: /v1/analytics/add-events
          method: POST
          cors: true
          # authorizer:
          #   name: CognitoAuthorizer
          #   type: COGNITO_USER_POOLS
          #   arn: !GetAtt CognitoUserPool.Arn
    environment:
      EVENTS_TABLE: !Ref EventsTableV2
  add-feature-flag:
    handler: functions/analytics/add-feature-flag.handler
    events:
      - http:
          path: /v1/analytics/add-feature-flag
          method: POST
          cors: true
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: !GetAtt CognitoUserPool.Arn
    environment:
      FEATURE_FLAGS_TABLE: !Ref FeatureFlagsTable
  remove-feature-flag:
    handler: functions/analytics/remove-feature-flag.handler
    events:
      - http:
          path: /v1/analytics/remove-feature-flag
          method: POST
          cors: true
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: !GetAtt CognitoUserPool.Arn
    environment:
      FEATURE_FLAGS_TABLE: !Ref FeatureFlagsTable
  list-feature-flags:
    handler: functions/analytics/list-feature-flags.handler
    events:
      - http:
          path: /v1/analytics/list-feature-flags
          method: POST
          cors: true
          # authorizer:
          #   name: CognitoAuthorizer
          #   type: COGNITO_USER_POOLS
          #   arn: !GetAtt CognitoUserPool.Arn

    environment:
      FEATURE_FLAGS_TABLE: !Ref FeatureFlagsTable

resources:
  Resources:
    UserCredentialsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        GlobalSecondaryIndexes:
          - IndexName: byUserId
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: id
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        Tags:
          - Key: Environment
            Value: ${self:custom.stage}
          - Key: Name
            Value: credentials-table
    AdaptiveKMSKey:
      Type: AWS::KMS::Key
      Properties:
        Description: "Adaptive KMS Key"
        Enabled: true
        KeyPolicy:
          Id: "key-lambda-1"
          Statement:
            Sid: "Allow administration of the key"
            Effect: "Allow"
            Principal:
              AWS: "*"
            Action: "kms:*"
            Resource: "*"
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        AutoVerifiedAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: false
            RequireNumbers: false
            RequireUppercase: false
            RequireSymbols: false
        UsernameAttributes:
          - email
        LambdaConfig:
          PostConfirmation: !GetAtt ConfirmUserSignupLambdaFunction.Arn

    # 3. AWS Cognito User Pool Client
    WebUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        UserPoolId: !Ref CognitoUserPool
        ClientName: web
        ExplicitAuthFlows:
          - ALLOW_USER_SRP_AUTH
          - ALLOW_USER_PASSWORD_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
          - ALLOW_CUSTOM_AUTH
        PreventUserExistenceErrors: ENABLED

    # 7. AWS  Lambda Permission
    CognitoUserPoolConfirmUserSignupLambdaPermission:
      Type: AWS::Lambda::Permission
      Properties:
        Action: lambda:invokeFunction
        FunctionName: !Ref ConfirmUserSignupLambdaFunction
        Principal: cognito-idp.amazonaws.com
        SourceArn: !GetAtt CognitoUserPool.Arn

    UserPreferenceTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        Tags:
          - Key: Environment
            Value: ${self:custom.stage}
          - Key: Name
            Value: user-preference-table

    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
          - AttributeName: id
            AttributeType: S
        GlobalSecondaryIndexes:
          - IndexName: byEmail
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        Tags:
          # To keep track of user table for diffeent environment
          - Key: Environment
            Value: ${self:custom.stage}
          - Key: Name
            Value: users-table
    IdentityTableV2:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: email
            AttributeType: S
          - AttributeName: emailAndDeviceType
            AttributeType: S
          - AttributeName: websiteId
            AttributeType: S
        GlobalSecondaryIndexes:
          - IndexName: byWebsiteId
            KeySchema:
              - AttributeName: websiteId
                KeyType: HASH
              - AttributeName: id
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: byEmail
            KeySchema:
              - AttributeName: email
                KeyType: HASH
              - AttributeName: id
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: byEmailAndDeviceType
            KeySchema:
              - AttributeName: emailAndDeviceType
                KeyType: HASH
              - AttributeName: id
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        Tags:
          # To keep track of user table for diffeent environment
          - Key: Environment
            Value: ${self:custom.stage}
          - Key: Name
            Value: identity-table
    EventsTableV2:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: email
            AttributeType: S
          - AttributeName: websiteId
            AttributeType: S
        GlobalSecondaryIndexes:
          - IndexName: byEmail
            KeySchema:
              - AttributeName: email
                KeyType: HASH
              - AttributeName: id
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: byWebsiteId
            KeySchema:
              - AttributeName: websiteId
                KeyType: HASH
              - AttributeName: id
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        Tags:
          # To keep track of user table for diffeent environment
          - Key: Environment
            Value: ${self:custom.stage}
          - Key: Name
            Value: events-table
    FeatureFlagsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: websiteId
            AttributeType: S
        GlobalSecondaryIndexes:
          - IndexName: byWebsiteId
            KeySchema:
              - AttributeName: websiteId
                KeyType: HASH
              - AttributeName: id
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        Tags:
          # To keep track of user table for diffeent environment
          - Key: Environment
            Value: ${self:custom.stage}
          - Key: Name
            Value: feature-flags-table
